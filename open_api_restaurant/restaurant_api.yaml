openapi: 3.0.0
info:
  title: restaurant manipulation APIs
  version: 1.0.0
  contact:
    email: aws.ayyash.1@gmail.com
paths:
  # chefs
  /chefs:
    get:
      summary: Returns the list of chefs.
      operationId: restaurant_apis.chefs_api.get_chefs # the method (function) that handles this request in the API file
      responses:
        '200':
          description: A JSON array of chefs names
    post:
      summary: Creates a chef.
      operationId: restaurant_apis.chefs_api.post_chef
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chef_info'
      responses:
        '200':
          description: Created
        '400':
          description: Error
  /chef/{employee_id}:
    get:
      summary: Returns a chef by ID.
      operationId: restaurant_apis.chefs_api.get_chef
      parameters:
        - name: employee_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
    put:
      summary: update the info of a specific chef.
      operationId: restaurant_apis.chefs_api.put_chef
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chef_info'
      responses:
        '200':
          description: updated
        '404':
          description: Not Found
    delete:
      summary: delete a chef by ID.
      operationId: restaurant_apis.chefs_api.delete_chef
      parameters:
        - name: employee_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
  /chef/{employee_id}/add_item: # adding {item_id} in the body
    post:
      summary: Returns a chef by ID.
      operationId: restaurant_apis.chefs_api.post_item_to_chef
      parameters:
        - name: employee_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/item_id_posting'
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
  # customers
  /customers:
    get:
      summary: Returns the list of customers.
      operationId: restaurant_apis.customers_api.get_customers # the method (function) that handles this request in the API file
      responses:
        '200':
          description: A JSON array of chefs names
    post:
      summary: Creates a chef.
      operationId: restaurant_apis.customers_api.post_customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_info'
      responses:
        '200':
          description: Created
        '400':
          description: Error
  /customer/{customer_id}:
    get:
      summary: Returns a customer by ID.
      operationId: restaurant_apis.customers_api.get_customer
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
    put:
      summary: update the info of a specific customer.
      operationId: restaurant_apis.customers_api.put_customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_info'
      responses:
        '200':
          description: updated
        '404':
          description: Not Found
    delete:
      summary: delete a customer by ID.
      operationId: restaurant_apis.customers_api.delete_customer
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

  /customer/{customer_id}/make_order:
    post:
      summary: Returns a customer by ID.
      operationId: restaurant_apis.customers_api.post_order_by_customer
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order_info'
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
  # waiters
  /waiters:
    get:
      summary: Returns the list of waiters.
      operationId: restaurant_apis.waiters_api.get_waiters # the method (function) that handles this request in the API file
      responses:
        '200':
          description: A JSON array of waiters data
    post:
      summary: Creates a waiter.
      operationId: restaurant_apis.waiters_api.post_waiter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/waiter_info'
      responses:
        '200':
          description: Created
        '400':
          description: Error
  /waiter/{employee_id}:
    get:
      summary: Returns a waiter by ID.
      operationId: restaurant_apis.waiters_api.get_waiter
      parameters:
        - name: employee_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
    put:
      summary: update the info of a specific waiter.
      operationId: restaurant_apis.waiters_api.put_waiter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/waiter_info'
      responses:
        '200':
          description: updated
        '404':
          description: Not Found
    delete:
      summary: delete a waiter by ID.
      operationId: restaurant_apis.waiters_api.delete_waiter
      parameters:
        - name: employee_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
  /waiter/{employee_id}/add_order: # adding (attaching an order for him -the waiter-) # add the 'order_id' in the post body
    post:
      summary: Returns a waiter by ID.
      operationId: restaurant_apis.waiters_api.post_for_waiter_prepare_order
      parameters:
        - name: employee_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order_id_posting'
      responses:
        '200':
          description: OK
        '400':
          description: Error

  # item
  /items:
    get:
      summary: Returns the list of items.
      operationId: restaurant_apis.items_api.get_items # the method (function) that handles this request in the API file
      responses:
        '200':
          description: A JSON array of items data
    post:
      summary: Creates a item.
      operationId: restaurant_apis.items_api.post_item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/item_info'
      responses:
        '200':
          description: Created
        '400':
          description: Error
  /item/{item_id}:
    get:
      summary: Returns a item by ID.
      operationId: restaurant_apis.items_api.get_item
      parameters:
        - name: item_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
    put:
      summary: update the info of a specific item.
      operationId: restaurant_apis.items_api.put_item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/item_info'
      responses:
        '200':
          description: updated
        '404':
          description: Not Found
    delete:
      summary: delete a item by ID.
      operationId: restaurant_apis.items_api.delete_item
      parameters:
        - name: item_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Not Found


  # order
  /orders:
    get:
      summary: Returns the list of orders.
      operationId: restaurant_apis.orders_api.get_orders # the method (function) that handles this request in the API file
      responses:
        '200':
          description: A JSON array of orders data
    post:
      summary: Creates a order.
      operationId: restaurant_apis.orders_api.post_order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order_info'
      responses:
        '200':
          description: Created
        '400':
          description: Error
  /order/{order_id}:
    get:
      summary: Returns an order by ID.
      operationId: restaurant_apis.orders_api.get_order
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
    put:
      summary: update the info of a specific order.
      operationId: restaurant_apis.orders_api.put_order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order_info'
      responses:
        '200':
          description: updated
        '404':
          description: Not Found
    delete:
      summary: delete a order by ID.
      operationId: restaurant_apis.orders_api.delete_order
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Not Found


components:
  schemas:
    chef_info:
      title: info. of the chef
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        national_id:
          type: string
        daily_working_hours:
          type: integer
        hour_wage:
          type: integer
        experience:
          type: integer

      required:
        - first_name
        - last_name
        - email
        - national_id
        - daily_working_hours
        - hour_wage
        - experience

    customer_info:
      title: info. of the customer
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        user_name:
          type: string

      required:
        - first_name
        - last_name
        - email
        - user_name

    waiter_info:
      title: info. of the waiter
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        national_id:
          type: string
        daily_working_hours:
          type: integer
        hour_wage:
          type: integer
      required:
        - first_name
        - last_name
        - email
        - national_id
        - daily_working_hours
        - hour_wage

    item_info:
      title: info. of the items
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
      required:
        - name
        - description
        - price
    order_info:
      title: info. of the items that an order has
      type: object
      properties:
        items:
          type: array
          properties:
            item_id:
              type: integer
              format: int64

          required:
            - item_id
      required:
        - items

    order_id_posting:
      title: info. of the items
      type: integer
      properties:
        order_id:
          type: integer
          format: int64
      required:
        - order_id
    item_id_posting:
      title: info. of the items
      type: integer
      properties:
        item_id:
          type: integer
          format: int64
      required:
        - item_id
